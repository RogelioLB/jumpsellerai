'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '@/store/useCart';
import { ShippingMethod } from '@/jumpseller/types';
import { CartItem } from '@/store/cartStore';
import { ArrowLeft, ArrowRight, MapPin, Truck, CreditCard, User, Home, Phone, Mail, FileText } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface ContactData {
  name: string;
  surname: string;
  email: string;
  phone: string;
  address: string;
  city: string;
  postal: string;
  municipality: string;
  region: string;
}

interface BillingData {
  name: string;
  surname: string;
  taxid: string;
  address: string;
  city: string;
  postal: string;
  municipality: string;
  region: string;
}

export default function PaymentPage() {
  const router = useRouter();
  const { items, clearCart } = useCart();
  const [contactData, setContactData] = useState<ContactData | null>(null);
  const [shippingMethod, setShippingMethod] = useState<ShippingMethod | null>(null);
  const [sameAsShipping, setSameAsShipping] = useState(true);
  const [billingData, setBillingData] = useState<BillingData>({
    name: '',
    surname: '',
    taxid: '',
    address: '',
    city: '',
    postal: '',
    municipality: '',
    region: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [regions, setRegions] = useState<{code: string, name: string}[]>([]);
  const [municipalities, setMunicipalities] = useState<{code: string, name: string}[]>([]);
  const [isLoadingMunicipalities, setIsLoadingMunicipalities] = useState(false);
  const [regionName, setRegionName] = useState<string>("");
  const [municipalityName, setMunicipalityName] = useState<string>("");

  const subtotal = items.reduce((total: number, item: CartItem) => total + (item.price.amount * item.quantity), 0);
  
  // Calculate shipping cost based on the structure
  const shipping = shippingMethod?.free_shipping 
    ? 0 
    : (shippingMethod?.fee && shippingMethod.fee.length > 0) 
      ? shippingMethod.fee[0].value 
      : 0;
      
  const total = subtotal + shipping;

  useEffect(() => {
    // Redirect to contact page if contact information is not available
    const storedContact = sessionStorage.getItem('checkoutContact');
    const storedShipping = sessionStorage.getItem('checkoutShipping');
    
    if (!storedContact || !storedShipping) {
      router.push('/checkout/contact');
      return;
    }

    const parsedContact = JSON.parse(storedContact) as ContactData;
    const parsedShipping = JSON.parse(storedShipping) as ShippingMethod;
    
    setContactData(parsedContact);
    setShippingMethod(parsedShipping);
    
    // Initialize billing data with contact data
    setBillingData({
      name: parsedContact.name,
      surname: parsedContact.surname,
      taxid: '',
      address: parsedContact.address,
      city: parsedContact.city,
      postal: parsedContact.postal,
      municipality: parsedContact.municipality,
      region: parsedContact.region
    });

    // Fetch regions
    const fetchRegions = async () => {
      try {
        const response = await fetch('/api/jumpseller/regions');
        const data = await response.json();
        if (data.regions) {
          setRegions(data.regions);
          
          // Find region name
          const region = data.regions.find((r: {code: string, name: string}) => r.code === parsedContact.region);
          if (region) {
            setRegionName(region.name);
          }
        }
      } catch (error) {
        console.error('Error fetching regions:', error);
      }
    };

    // Fetch municipality name
    const fetchMunicipalityName = async () => {
      try {
        const response = await fetch(`/api/jumpseller/municipalities?region=${parsedContact.region}`);
        const data = await response.json();
        if (data.municipalities) {
          const municipality = data.municipalities.find((m: {code: string, name: string}) => m.code === parsedContact.municipality);
          if (municipality) {
            setMunicipalityName(municipality.name);
          }
        }
      } catch (error) {
        console.error('Error fetching municipality name:', error);
      }
    };

    fetchRegions();
    fetchMunicipalityName();
  }, [router]);

  // Función para obtener municipios según la región
  const fetchMunicipalities = async (region: string) => {
    if (!region) {
      setMunicipalities([]);
      return;
    }

    try {
      setIsLoadingMunicipalities(true);
      const response = await fetch(`/api/jumpseller/municipalities?region=${region}`);
      const data = await response.json();
      if (data.municipalities) {
        setMunicipalities(data.municipalities);
      }
    } catch (error) {
      console.error('Error fetching municipalities:', error);
    } finally {
      setIsLoadingMunicipalities(false);
    }
  };

  useEffect(() => {
    // Fetch municipalities when region changes
    if (!sameAsShipping && billingData.region) {
      fetchMunicipalities(billingData.region);
    }
  }, [billingData.region, sameAsShipping]);

  const handleBillingChange = (field: keyof BillingData, value: string) => {
    setBillingData({
      ...billingData,
      [field]: value,
      // Reset municipality when region changes
      ...(field === 'region' ? { municipality: '' } : {})
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!contactData || !shippingMethod) {
      setError('Información de contacto o envío no disponible');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Aquí iría el código para procesar el pago, por ahora solo simulamos
      // una espera y redirigimos a la página de confirmación
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Limpiamos el carrito y redirigimos a la página de confirmación
      clearCart();
      router.push('/checkout/confirmation');
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Error al procesar el pago');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Si el carrito está vacío, mostrar un mensaje
  if (items.length === 0) {
    return (
      <div className="container max-w-7xl mx-auto p-4">
        <div className="max-w-4xl mx-auto text-center">
          <Card className="p-8">
            <CardContent className="flex flex-col items-center">
              <div className="size-20 bg-muted rounded-full flex items-center justify-center mb-4">
                <CreditCard className="size-10 text-muted-foreground" />
              </div>
              <h2 className="text-xl font-semibold mb-2">Tu carrito está vacío</h2>
              <p className="text-muted-foreground mb-4">
                No puedes proceder al pago sin productos en tu carrito.
              </p>
              <Button onClick={() => router.push('/')}>
                Volver a la tienda
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="container max-w-7xl mx-auto p-4">
      <div className="max-w-4xl mx-auto pb-8">
      
        <Card className="mb-8">
          <CardHeader className="pb-0">
            <div className="flex flex-col items-center">
              <h1 className="text-2xl font-bold mb-4">Checkout</h1>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex justify-between items-center px-4 md:px-12">
              <div className="flex flex-col items-center">
                <div className="size-10 bg-muted-foreground/20 rounded-full flex items-center justify-center text-muted-foreground">
                  1
                </div>
                <span className="text-sm mt-2">Contacto</span>
              </div>
              <div className="h-1 flex-1 bg-muted-foreground/20 mx-2"></div>
              <div className="flex flex-col items-center">
                <div className="size-10 bg-muted-foreground/20 rounded-full flex items-center justify-center text-muted-foreground">
                  2
                </div>
                <span className="text-sm mt-2">Envío</span>
              </div>
              <div className="h-1 flex-1 bg-muted-foreground/20 mx-2"></div>
              <div className="flex flex-col items-center">
                <div className="size-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground">
                  3
                </div>
                <span className="text-sm mt-2">Pago</span>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Resumen de información */}
        <div className="grid gap-8 mb-8">
          {contactData && (
            <Card className="mb-4">
              <CardHeader className="pb-2">
                <div className="flex items-center">
                  <div className="size-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center mr-4">
                    <MapPin size={20} />
                  </div>
                  <CardTitle>Dirección de contacto</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <p className="flex items-center">
                      <User className="size-5 mr-2 text-muted-foreground" /> {contactData.name} {contactData.surname}
                    </p>
                    <p className="flex items-center mt-1">
                      <Home className="size-5 mr-2 text-muted-foreground" /> {contactData.address}
                    </p>
                    <p className="flex items-center mt-1">
                      <MapPin className="size-5 mr-2 text-muted-foreground" /> {contactData.city}, {municipalityName}, {regionName}
                    </p>
                  </div>
                  <div>
                    <p className="flex items-center">
                      <Phone className="size-5 mr-2 text-muted-foreground" /> {contactData.phone}
                    </p>
                    <p className="flex items-center mt-1">
                      <Mail className="size-5 mr-2 text-muted-foreground" /> {contactData.email}
                    </p>
                  </div>
                </div>
                <div className="mt-4">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => router.push('/checkout/contact')}
                    className="flex items-center gap-2"
                  >
                    Editar información
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
          
          {shippingMethod && (
            <Card className="mb-4">
              <CardHeader className="pb-2">
                <div className="flex items-center">
                  <div className="size-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center mr-4">
                    <Truck size={20} />
                  </div>
                  <CardTitle>Método de envío</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <p className="font-medium">{shippingMethod.name}</p>
                <p className="text-sm text-muted-foreground">
                  {shippingMethod.services && shippingMethod.services.length > 0 
                    ? `Servicio: ${shippingMethod.services[0].original_service_name || shippingMethod.services[0].service_name || shippingMethod.services[0].name || shippingMethod.type}`
                    : `Tipo: ${shippingMethod.type}`}
                </p>
                <p className="mt-1 font-semibold">
                  {shipping === 0 ? (
                    <span className="text-green-600 dark:text-green-400">Gratis</span>
                  ) : (
                    `$${shipping.toLocaleString()}`
                  )}
                </p>
                <p className="mt-2 text-sm text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/30 p-2 rounded-md">
                  <svg xmlns="http://www.w3.org/2000/svg" className="inline-block h-4 w-4 mr-1 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  El precio final del envío se calculará en la pasarela de pago.
                </p>
                <div className="mt-4">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => router.push('/checkout/shipping')}
                    className="flex items-center gap-2"
                  >
                    Editar método de envío
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
          
          <Card className="mb-4">
            <CardHeader className="pb-2">
              <div className="flex items-center">
                <div className="size-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center mr-4">
                  <CreditCard size={20} />
                </div>
                <CardTitle>Datos de Facturación</CardTitle>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="flex items-center mb-4">
                  <div className="flex items-center space-x-2">
                    <input 
                      type="checkbox" 
                      id="same-as-shipping"
                      checked={sameAsShipping}
                      onChange={() => setSameAsShipping(!sameAsShipping)}
                      className="size-4 text-primary focus:ring-primary rounded"
                    />
                    <Label htmlFor="same-as-shipping">Usar la misma dirección de envío</Label>
                  </div>
                </div>

                {!sameAsShipping && (
                  <div className="space-y-4 p-4 border border-input rounded-md">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="billing-name">Nombre</Label>
                        <Input
                          id="billing-name"
                          type="text"
                          value={billingData.name}
                          onChange={(e) => handleBillingChange('name', e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="billing-surname">Apellido</Label>
                        <Input
                          id="billing-surname"
                          type="text"
                          value={billingData.surname}
                          onChange={(e) => handleBillingChange('surname', e.target.value)}
                          required
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="billing-taxid">RUT o Identificación Fiscal</Label>
                      <Input
                        id="billing-taxid"
                        type="text"
                        value={billingData.taxid}
                        onChange={(e) => handleBillingChange('taxid', e.target.value)}
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="billing-address">Dirección</Label>
                      <Input
                        id="billing-address"
                        type="text"
                        value={billingData.address}
                        onChange={(e) => handleBillingChange('address', e.target.value)}
                        required
                      />
                    </div>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="billing-city">Ciudad</Label>
                        <Input
                          id="billing-city"
                          type="text"
                          value={billingData.city}
                          onChange={(e) => handleBillingChange('city', e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="billing-postal">Código Postal</Label>
                        <Input
                          id="billing-postal"
                          type="text"
                          value={billingData.postal}
                          onChange={(e) => handleBillingChange('postal', e.target.value)}
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="billing-region">Región</Label>
                      <Select 
                        value={billingData.region} 
                        onValueChange={(value) => {
                          handleBillingChange('region', value);
                          fetchMunicipalities(value);
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione una región" />
                        </SelectTrigger>
                        <SelectContent>
                          {regions.map((region) => (
                            <SelectItem key={region.code} value={region.code}>
                              {region.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="billing-municipality">Comuna</Label>
                      <Select 
                        value={billingData.municipality} 
                        onValueChange={(value) => handleBillingChange('municipality', value)}
                        disabled={isLoadingMunicipalities || municipalities.length === 0}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccione una comuna" />
                        </SelectTrigger>
                        <SelectContent>
                          {municipalities.map((municipality) => (
                            <SelectItem key={municipality.code} value={municipality.code}>
                              {municipality.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      {isLoadingMunicipalities && (
                        <p className="text-sm text-muted-foreground mt-1">
                          Cargando comunas...
                        </p>
                      )}
                    </div>
                  </div>
                )}

                {error && (
                  <div className="bg-destructive/20 border-l-4 border-destructive p-4 my-6 rounded-md">
                    <p className="text-destructive flex items-center">
                      <svg className="size-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      {error}
                    </p>
                  </div>
                )}
                
                <div className="flex justify-between mt-8 gap-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.push('/checkout/shipping')}
                    className="flex items-center gap-2"
                  >
                    <ArrowLeft size={16} /> Volver a envío
                  </Button>
                  <Button
                    type="submit"
                    disabled={isSubmitting}
                    className="flex items-center gap-2"
                  >
                    {isSubmitting ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 size-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Procesando...
                      </>
                    ) : (
                      <>
                        Finalizar Compra <ArrowRight size={16} />
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
          
          {/* Resumen de la orden */}
          <Card>
            <CardHeader className="pb-2">
              <div className="flex items-center">
                <div className="size-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center mr-4">
                  <FileText size={20} />
                </div>
                <CardTitle>Resumen de la Orden</CardTitle>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 mb-4">
                {items.map((item: CartItem) => (
                  <div key={item.id} className="flex justify-between">
                    <div>
                      <span className="font-medium">{item.title}</span>
                      <span className="text-muted-foreground ml-2">x{item.quantity}</span>
                    </div>
                    <span>${(item.price.amount * item.quantity).toLocaleString()}</span>
                  </div>
                ))}
              </div>
              
              <Separator className="my-3" />
              
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Subtotal</span>
                  <span>${subtotal.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Envío</span>
                  <span className="flex items-center">
                    {shipping === 0 ? (
                      <span className="text-green-600 dark:text-green-400">Gratis</span>
                    ) : (
                      `$${shipping.toLocaleString()}`
                    )}
                    <span className="ml-1 text-xs text-amber-600 dark:text-amber-400">*</span>
                  </span>
                </div>
              </div>
              
              <Separator className="my-3" />
              
              <div className="flex justify-between font-bold text-lg">
                <span>Total</span>
                <span>${total.toLocaleString()}</span>
              </div>
              
              <p className="text-xs text-amber-600 dark:text-amber-400 mt-2">
                * El precio final del envío se calculará en la pasarela de pago.
              </p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
